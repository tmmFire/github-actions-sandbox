name: Later Gator
on:
  pull_request:
    types: [ labeled ]

jobs:
  create_issue:
    name: Create team sync issue
    runs-on: ubuntu-latest
    if: github.event.label.name == 'later gator'
    permissions:
      issues: write
      repository-projects: write
    steps:
      - name: Generate token
        id: generate_token
        uses: actions/create-github-app-token@v1
        with:
          app-id: ${{ secrets.APP_ID }}
          private-key: ${{ secrets.APP_PEM }}

      - name: Create team sync issue
        env:
          GH_TOKEN: ${{ steps.generate_token.outputs.token }}
          GH_REPO: ${{ github.repository }}
          TITLE: 後ほど対応： ${{ github.event.pull_request.title }}
          ASSIGNEES: ${{ github.event.sender.login }}
          LABELS: not now but soon
          BODY: |
            ### 対応するPR

            - ${{ github.event.pull_request.title }} ${{ github.event.pull_request.html_url }}
        run: |
          echo $(gh project list --format json --owner ${{ github.repository_owner }})
          gh issue create \
            --title "$TITLE" \
            --assignee "$ASSIGNEES" \
            --label "$LABELS" \
            --body "$BODY"

      - name: add issue to project
        env:
          GH_TOKEN: ${{ steps.generate_token.outputs.token }}
          GH_REPO: ${{ github.repository }}
          USER: ${{ github.repository_owner }}
          PROJECT_NUMBER: 2
        run: |
          gh api graphql -f query='
            query($org: String!, $number: Int!) {
              user(login: $org){
                projectV2(number: $number) {
                  id
                  fields(first:20) {
                  nodes {
                    ... on ProjectV2Field {
                      id
                      name
                    }
                    ... on ProjectV2SingleSelectField {
                      id
                      name
                      options {
                        id
                        name
                      }
                    }
                  }
                }
              }
            }
          }' -f org=$USER -F number=$PROJECT_NUMBER > project_data.json
          
          echo project_data.json
          
          echo 'PROJECT_ID='$(jq '.data.organization.projectV2.id' project_data.json) >> $GITHUB_ENV
          echo 'PRIORITY_FIELD_ID='$(jq '.data.organization.projectV2.fields.nodes[] | select(.name== "Priority") | .id' project_data.json) >> $GITHUB_ENV
          echo 'P2_OPTION_ID='$(jq '.data.organization.projectV2.fields.nodes[] | select(.name== "Priority") | .options[] | select(.name=="P2") |.id' project_data.json) >> $GITHUB_ENV
          echo 'STATUS_FIELD_ID='$(jq '.data.organization.projectV2.fields.nodes[] | select(.name== "Status") | .id' project_data.json) >> $GITHUB_ENV
          echo 'TODO_OPTION_ID='$(jq '.data.organization.projectV2.fields.nodes[] | select(.name== "Status") | .options[] | select(.name=="Todo") |.id' project_data.json) >> $GITHUB_ENV
          
          echo $GITHUB_ENV

      - name: add issue to project
        env:
          GH_TOKEN: ${{ steps.generate_token.outputs.token }}
          PR_ID: ${{ github.event.pull_request.node_id }}
        run: |
          item_id="$( gh api graphql -f query='
          mutation($project:ID!, $pr:ID!) {
            addProjectV2ItemById(input: {projectId: $project, contentId: $pr}) {
              item {
                id
              }
            }
          }' -f project=$PROJECT_ID -f pr=$PR_ID --jq '.data.addProjectV2ItemById.item.id')"
            
          echo 'ITEM_ID='$item_id >> $GITHUB_ENV

      - name: Set fields
        env:
          GH_TOKEN: ${{ steps.generate_token.outputs.token }}
        run: |
          echo $TODO_OPTION_ID
          echo ${{ env.TODO_OPTION_ID }}
          gh api graphql -f query='
            mutation (
              $project: ID!
              $item: ID!
              $status_field: ID!
              $status_value: String!
              $date_field: ID!
              $date_value: Date!
            ) {
              set_status: updateProjectV2ItemFieldValue(input: {
                projectId: $project
                itemId: $item
                fieldId: $status_field
                value: {
                  singleSelectOptionId: $status_value
                  }
              }) {
                projectV2Item {
                  id
                  }
              }
              set_priority: updateProjectV2ItemFieldValue(input: {
                projectId: $project
                itemId: $item
                fieldId: $priority_field
                value: {
                  date: $priority_value
                }
              }) {
                projectV2Item {
                  id
                }
              }
            }' -f project=$PROJECT_ID -f item=$ITEM_ID -f status_field=$STATUS_FIELD_ID -f status_value=${{ env.TODO_OPTION_ID }} -f $priority_field=$PRIORITY_FIELD_ID -f priority_value=$P2_OPTION_ID --silent
  unassign_pr:
    name: Unassign PR
    runs-on: ubuntu-latest
    if: github.event.label.name == 'later gator'
    permissions:
      pull-requests: write
    steps:
      - name: Unassign PR
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GH_REPO: ${{ github.repository }}
          PR_NUMBER: ${{ github.event.pull_request.number }}
          PR_ASSIGNEES: $(echo '${{ toJson(github.event.pull_request.assignees) }}' | jq -r '.[].login')
        run: |
          echo ${{ env.PR_ASSIGNEES }}
          if [ -n ${{ env.PR_ASSIGNEES }} ]; then
            echo gh pr edit "$PR_NUMBER" --repo "$GH_REPO" --remove-assignee "$PR_ASSIGNEES" 
            gh pr edit "$PR_NUMBER" --repo "$GH_REPO" --remove-assignee "$PR_ASSIGNEES"
          else
            echo "No assignees to remove."
          fi
